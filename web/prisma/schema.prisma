// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  firstname String?
  lastname  String?
  clerkId   String   @unique
  image     String?
  trial     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS 
  studio        media?
  subscriptions subscriptions?
  workspaces    workspaces[]
  videos        videos[]
  comments      comments[]
  members       members[]
  notifications notifications[]
  sender        invites[]       @relation("sender")
  receiver      invites[]       @relation("receiver")
}

model comments {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  user     users?     @relation(fields: [userId], references: [id])
  userId   String?    @db.Uuid
  video    videos?    @relation(fields: [videoId], references: [id])
  videoId  String?    @db.Uuid
  reply    comments[] @relation("reply")
  comment  comments?  @relation("reply", fields: [comentId], references: [id])
  comentId String?    @db.Uuid
}

model subscriptions {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan      SUBSCRIPTION_PLAN @default(FREE)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // RELATIONS
  user       users?  @relation(fields: [userId], references: [id])
  userId     String? @unique @db.Uuid
  customerId String  @unique
}

model media {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  screen String?
  mic    String?
  camera String?
  preset PRESET  @default(SD)

  // RELATIONS
  userId String? @unique @db.Uuid
  user   users?  @relation(fields: [userId], references: [id])
}

model workspaces {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      Type
  name      String
  createdAt DateTime @default(now())
  // RELATIONS
  userId    String?  @db.Uuid
  user      users?   @relation(fields: [userId], references: [id])

  folders folders[]
  videos  videos[]
  members members[]
  invites invites[]
}

model folders {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @default("Untitled Folder")
  createdAt DateTime @default(now())

  // RELATIONS

  workspace   workspaces? @relation(fields: [workspaceId], references: [id])
  workspaceId String?     @db.Uuid

  videos videos[]
}

model videos {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String?  @default("Untitled Video")
  description String?  @default("No Description")
  source      String   @unique
  processing  Boolean  @default(true)
  views       Int      @default(0)
  summary     String?
  createdAt   DateTime @default(now())

  // RELATIONS
  folder      folders?    @relation(fields: [folderId], references: [id])
  folderId    String?     @db.Uuid
  user        users?      @relation(fields: [userId], references: [id])
  userId      String?     @db.Uuid
  workspace   workspaces? @relation(fields: [workspaceId], references: [id])
  workspaceId String?     @db.Uuid
  comments    comments[]
}

model members {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  member    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  user        users?      @relation(fields: [userId], references: [id])
  userId      String?     @db.Uuid
  workspace   workspaces? @relation(fields: [workspaceId], references: [id])
  workspaceId String?     @db.Uuid
}

model notifications {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  user   users?  @relation(fields: [userId], references: [id])
  userId String? @db.Uuid
}

model invites {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  sender      users?      @relation("sender", fields: [senderId], references: [id])
  senderId    String?     @db.Uuid
  receiver    users?      @relation("receiver", fields: [receiverId], references: [id])
  receiverId  String?     @db.Uuid
  workspace   workspaces? @relation(fields: [workspaceId], references: [id])
  workspaceId String?     @db.Uuid
}

enum Type {
  PERSONAL
  PUBLIC
}

enum PRESET {
  HD
  SD
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}
